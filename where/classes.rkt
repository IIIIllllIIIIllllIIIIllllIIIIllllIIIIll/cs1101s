;hangar
;hotel
;shop

(define-syntax append!
  (syntax-rules ()
    ((append! target item) (if (not (member item target))
                               (set! target (append target (list item)))))))

(define (make-conversation initial-topics)
  (let ((topics initial-topics))
    (define (repl)
      (map (lambda (t) (display (cadr t)) (display "\n")) 
           topics)
      (define msg (read-line))
      (display "\n")
      (map (lambda (t) (if (equal? msg (car t)) ((caddr t))))
           topics)
      (repl))
    (define (check-topic topic cl)
      (member #t (map (lambda (t) (equal? topic (car t)))
                      cl)))
    (define (dispatch op . args)
      (cond ((eq? op 'show-topics)
             topics)
            ((eq? op 'check-topic)
             (check-topic (car args)))
            ((eq? op 'add-topics)
             (map (lambda (t) (if (not (check-topic (car t) topics))
                                  (set! topics (append topics (list t)))))
                  args))
            ((eq? op 'sub-topics)
             (set! topics (filter (lambda (t) (not (check-topic (car t) args)))
                                  topics)))
            ((eq? op 'repl)
             (repl))
            ((eq? op 'clear-topics)
             (set! topics '()))
            ))
    dispatch))